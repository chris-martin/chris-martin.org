<!DOCTYPE HTML>
<html><head><meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1"><title>Null as a sort of bottom</title><link rel="icon" href=""><link href="https://fonts.googleapis.com/css?family=Inconsolata|Merriweather" rel="stylesheet"><link rel="stylesheet" type="text/css" href="../hash/85a636ccc52703eb9b8e8a4508a0cc49.css"><meta name="twitter:site:id" content="18271443"><meta name="twitter:title" content="Null as a sort of bottom"></head><body><header class="global-page-header"><div class="container"><a href="..">Chris Martin</a></div></header><main><div><div class="post-head container"><h1 class="post-title">Null as a sort of bottom</h1><div class="post-date">2017 April 29</div></div><div class="post-body"><div class="container"><blockquote><p>“It uses the faculty of the imagination. But that does not mean <i>making things
up</i>. It is a form of seeing.”</p><p>“Not <i>real</i> traveling, then,” said Lyra, “Just pretend...”</p><p>“No,” said Xaphania, “nothing like pretend. Pretending is easy. This way is
hard, but much truer.”</p><p>— Philip Pullman, <i>The Amber Spyglass</i></p></blockquote><p>I struggle to talk about programming languages that aren’t based in some
mathematical formalism. I have to choose ways of reasoning about them. I find
it’s often helpful to choose to mentally declare null to be a kind of bottom
when reasoning about languages that don’t provide their own sufficient system of
reason.</p><p>I’m aware that this is blasphemy. The official Haskell party line goes something
like this:</p><blockquote><p><i>Novice</i>: “So is <i>bottom</i> sort of like <i>null</i>?”</p><p><i>Master</i>: “No, they couldn’t be more different! Null is a value; bottom is
  not. There is one null value; there are no bottom values.”</p></blockquote><h2>The real bottom</h2><p>Here are some bona fide exemplary bottoms.</p><p>Haskell:</p></div><div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span class="ot">bottom ::</span> forall a<span class="fu">.</span> a
bottom <span class="fu">=</span>
  <span class="kw">let</span> x <span class="fu">=</span> x
  <span class="kw">in</span>  x</code></pre></div><div class="container"><p>Scala:</p></div><div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span class="kw">def</span> bottom[A]: A = {
  <span class="kw">while</span> (<span class="kw">true</span>) {}
  ???
}</code></pre></div><div class="container"><p>Non-terminating evaluation. The infinite loop. That possibility lurking in all
Turing-complete systems, that exciting consequence of the undecidability of the
<i>Entscheidungsproblem</i>. It is a fascinating and irksome reality. If you
understand what this is and why it must be, be proud of your knowledge. But keep
going.</p><h3>The real bottom is annoying.</h3><p>Here are some partial functions, defined using the bottoms I showed above.</p><p>Haskell:</p></div><div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span class="ot">fromJust ::</span> forall a<span class="fu">.</span> <span class="dt">Maybe</span> a <span class="ot">-&gt;</span> a
fromJust <span class="fu">=</span>
  \<span class="kw">case</span>
    <span class="dt">Just</span> a  <span class="ot">-&gt;</span> a
    <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="kw">let</span> x <span class="fu">=</span> x
               <span class="kw">in</span>  x</code></pre></div><div class="container"><p>Scala:</p></div><div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span class="kw">def</span> fromSome[A](o: Option[A]): A =
  o <span class="kw">match</span> {
    <span class="kw">case</span> Some(a) =&gt; a
    <span class="kw">case</span> None    =&gt; <span class="kw">while</span> (<span class="kw">true</span>) {}
                    ???
  }</code></pre></div><div class="container"><p>This approach works, but it is a harsh way to treat the poor evaluator. Remember
there’s no general way to know that you’ve hit nonterminating recursion. So all
we can do with <code>fromJust Nothing</code> when executing this sort of program is spin
indefinitely trying to evaluate it.</p><h2>Tagged bottoms</h2><p>Once you’re in a situation with nonterminating recursion, it’s impossible to
either finish evaluating or know that you’ll never finish evaluating. It’s a
dreadful state, so it seems unnecessarily cruel to ever <i>intentionally</i> produce
it for the evaluator to either puzzle out or chew on forever. If we <i>know</i> that
an expression will be bottom, let’s state that explicitly in our code.</p></div><div class="sourceCode"><pre class="sourceCode"><code class="sourceCode">fromJust <span class="fu">=</span>
  \<span class="kw">case</span>
    <span class="dt">Just</span> a  <span class="ot">-&gt;</span> a
    <span class="dt">Nothing</span> <span class="ot">-&gt;</span> undefined</code></pre></div><div class="container"><p><code>fromJust Nothing</code> is still bottom — it’s still an expression of type <code>a</code> that
does not evaluate to any value of type <code>a</code> — but we’ve added a little metadata
that lets us fail quickly when attempting to evaluate it.</p><p>We can go further than that, though, and provide not only a proclamation of
bottomness, but an <i>explanation</i> for <i>why</i> the expression is bottom.</p></div><div class="sourceCode"><pre class="sourceCode"><code class="sourceCode">fromJust <span class="fu">=</span>
  \<span class="kw">case</span>
    <span class="dt">Just</span> a  <span class="ot">-&gt;</span> a
    <span class="dt">Nothing</span> <span class="ot">-&gt;</span> error <span class="st">&quot;fromJust Nothing&quot;</span></code></pre></div><div class="container"><p>Don’t be fooled: the expression <code>fromJust Nothing</code> is still bottom. But when
that expression is evaluated, the fact that it is bottom is <i>known</i>, and that
fact <i>comes with some additional information</i>.</p><p>“Tagged bottom” is a term I just made up, for lack of a better phrase. It refers
to <i>the result of determining that an expression cannot be evaluated</i>, including
some justification if available, like “this expression can’t be evaluated
because it includes a division by zero”. In the case of <code>undefined</code>, the tag
merely asserts that the expression <i>is</i> bottom.</p><p><i>Bottom is nothing. It has no values. It is the epitome of emptiness.</i> — These
are half truths. In Haskell, bottoms can carry information, and we can even
inspect them (only in IO):</p></div><div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span class="ot">try   ::</span> <span class="dt">Exception</span> e <span class="ot">=&gt;</span> <span class="dt">IO</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> (<span class="dt">Either</span> e a)
catch<span class="ot"> ::</span> <span class="dt">Exception</span> e <span class="ot">=&gt;</span> <span class="dt">IO</span> a <span class="ot">-&gt;</span> (e <span class="ot">-&gt;</span> <span class="dt">IO</span> a) <span class="ot">-&gt;</span> <span class="dt">IO</span> a</code></pre></div><div class="container"><h2>Non-null reasoning is morally correct</h2><p>Officially, <code>null</code> is a value that inhabits all <code>Nullable</code> types in Scala (which
is most of them).</p><p>But we do not operate in this mindset on a regular basis. Like bottom, we ignore
it, and allow it to propagate upward — often implicitly converted to
another form of bottom:</p></div><div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span class="kw">throw</span> <span class="kw">new</span> NullPointerException()</code></pre></div><div class="container"><p>Consider this Scala function that adds one to an integer:</p></div><div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span class="kw">def</span> <span class="fu">succ1</span>(x: BigInt): BigInt =
  x + <span class="dv">1</span></code></pre></div><div class="container"><p>Technically, this function is partial. Because when <code>x</code> is <code>null</code>, it throws
<code>NullPointerException</code>.</p><p>You could diligently handle nulls throughout your code:</p></div><div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span class="kw">def</span> <span class="fu">succ2</span>(x: BigInt): BigInt =
  <span class="kw">if</span> (x == <span class="kw">null</span>) <span class="kw">null</span>
  <span class="kw">else</span>           x + <span class="dv">1</span></code></pre></div><div class="container"><p>Or you can, as we did in the first version, choose to interpret null as a bottom
value — not an inhabitant of any type, but merely one of the many forms of
tagged bottom. In that case, we do not have to consider <code>succ1</code> to be a partial
function, because <code>null</code> no longer belongs to its domain.</p><p>When we choose <i>not</i> to ignore null — when we check <code>if (x == null)</code> or use
<code>try</code>/<code>catch</code> — we are writing meta-code that reasons about whether our program
has been reasoning correctly.</p><h2>The dark path</h2><p>From a software design perspective, bottoms are characterized by their use as a
<i>last resort</i>, when writing a total function is not possible or would be
particularly inconvenient.</p><p>Sometimes the temptation to use bottom tags in unextraordinary circumstances
leads us to dark places. We can do this by overusing <code>throw</code> and <code>catch</code> in
Haskell, and we can do this by overusing <code>null</code> as idiomatic Java does.</p><p>I do not believe null was Java’s billion-dollar mistake. It is no more
inherently harmful than <code>???</code> in Scala or <code>undefined</code> in Haskell. The
billion-dollar mistakes were more serious fundamental flaws — notably, its
omission of sum types and pattern matching — that drive Java’s users to abuse
tagged bottoms for lack of sufficient means to express themselves properly
within the normal confines of the type system. We can see from Scala that, with
this limitation removed, programmers typically choose to relegate null-tagged
bottom to a footnote along with the rest of the bottoms.</p></div></div></div></main><div class="post-footer container"><p>I write about Haskell and related topics; you can find my works online on <a href="http://typeclasses.com">Type Classes</a> and in print from <a href="http://joyofhaskell.com"><span style="text-decoration: italic;">The Joy of Haskell</span></a>.</p></div></body></html>