<!DOCTYPE HTML>
<html><head><meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1"><title>More than linked lists</title><link rel="icon" href=""><link href="https://fonts.googleapis.com/css?family=Inconsolata|Merriweather" rel="stylesheet"><link rel="stylesheet" type="text/css" href="../hash/bbdb3309c85cc05af4572bd7e5eeb723.css"><meta name="twitter:site:id" content="18271443"><meta name="twitter:title" content="More than linked lists"></head><body><header class="global-page-header"><div class="container"><a href="..">Chris Martin</a></div></header><main><div><div class="post-head container"><h1 class="post-title">More than linked lists</h1><div class="post-date">2017 December 24</div></div><div class="post-body"><div class="container"><p>A <a href="https://gist.github.com/vjeux/cc2c4f83a6b60d69b79057b6ef651b56">quote</a>:</p><blockquote><p>Functional programming uses lists as the primitive data type but it&#39;s a really annoying one to use in practice. You don&#39;t have (fast) random access nor size, performance isn&#39;t awesome as you&#39;ve got a lot of pointer dereferences and bad cache coherence, you cannot easily go backwards... Growable arrays have much better properties.</p></blockquote><p>Apologies to the author, who has prompted too much uproar and now just wants to be left alone. I wanted to try to write a helpful <a href="https://twitter.com/chris__martin/status/944641666404806657">response</a>, though, because this is a misconception that I used to have. I believe it&#39;s quite common.</p><hr><p>When I first glimpsed into the FP world, I recall thinking: <i>Immutable data structures? That sounds really limiting.</i> Then I saw the FP people talking about linked lists all the time, which only intensified that concern. But after living in that world for a while, what I find is:</p><p><b>Yes</b> — The linked list shows up far more in functional programming than other kinds of programming.</p><p><b>No</b> — We don&#39;t use linked lists in situations that call for properties like fast random access.</p><p>FP&#39;s extensive use of linked lists only augments the sorts of data structures you&#39;re used to, it doesn&#39;t replace them. In Haskell when we need a fancy list structure we&#39;ll use either <a href="https://hackage.haskell.org/package/vector"><code>Vector</code></a> which is contiguous in memory, or <code>Seq</code> (short for &quot;sequence&quot;) which has efficient operations for concatenation, insertion, etc. <code>Seq</code> is the standard choice with suitable performance for most purposes. It is in the <a href="https://hackage.haskell.org/package/containers">containers</a> package. Don&#39;t let the dependencies be offputting — these packages are commonplace, de facto parts of the standard library.</p><p>If you come from the world of strict evaluation, then linked lists in the presence of lazy evaluation are not at all what you think they are. You don&#39;t use a linked list in Haskell in a case where you&#39;d be using an <code>ArrayList</code> in Java; you use a linked list in Haskell in a case where you&#39;d be using a <code>for</code> loop in Java. The linked list in lazy FP corresponds to things that in other paradigms aren&#39;t represented as data types at all. And, by the way, the lists often get fused out of existence by compiler optimizations and don&#39;t end up constructed at runtime at all.</p></div></div></div></main><div class="post-footer container"><p>I write about Haskell and related topics; you can find my works online on <a href="http://typeclasses.com">Type Classes</a> and in print from <a href="http://joyofhaskell.com"><span style="text-decoration: italic;">The Joy of Haskell</span></a>.</p></div></body></html>