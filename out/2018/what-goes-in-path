<!DOCTYPE HTML>
<html><head><meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1"><title>What goes in $PATH?</title><link rel="icon" href=""><link href="https://fonts.googleapis.com/css?family=Inconsolata|Merriweather" rel="stylesheet"><link rel="stylesheet" type="text/css" href="../hash/de550f3732d372033976b5ac37673a4a.css"><meta name="twitter:site:id" content="18271443"><meta name="twitter:title" content="What goes in $PATH?"></head><body><header class="global-page-header"><div class="container"><a href="..">Chris Martin</a></div></header><main><div><div class="post-head container"><h1 class="post-title">What goes in $PATH?</h1><div class="post-date">2018 April 24</div></div><div class="post-body"><div class="container"><p>The <code>PATH</code> environment variable lists all the places where you have programs installed. It is customizable because there are a lot of package managers, and they all install things into different places, so your <code>PATH</code> needs to be tailored to the package managers that <i>you</i> use.</p><p>Here are some of the package managers I use and the places where they install programs:</p><table class="package-managers">
  <tr>
    <td><a href="https://nixos.org/nix/manual/">Nix</a></td>
    <td><code>$HOME/.nix-profile/bin</code></td>
  </tr>
  <tr>
    <td><a href="https://nixos.org/nixos/manual/">NixOS</a></td>
    <td><code>/run/current-system/sw/bin</code></td>
    </tr>
  <tr>
    <td><a href="https://www.haskell.org/cabal/">Cabal</a></td>
    <td><code>$HOME/.cabal/bin</code></td>
  </tr>
  <tr>
    <td><a href="https://www.haskellstack.org/">Stack</a></td>
    <td><code>$HOME/.local/bin</code></td>
  </tr>
  <tr>
    <td><a href="https://www.npmjs.com/">npm</a></td>
    <td><code>./node_modules/.bin</code></td>
  </tr>
</table><p>For our purposes here, the words “program,” “executable,” and “binary” are used synonymously. As you can see above, directories that are intended to be used with <code>PATH</code> tend to be named “bin,” signifying that they are full of binaries.</p><p><code>PATH</code> may be referred to as “the binary search path,” “the search path,” “the bin path,” or simply “the path.”</p><h2>An example</h2><p>Suppose you use Stack to install pandoc, but you get “command not found” when you try to run it.</p></div><div class="sourceCode"><pre class="sourceCode"><code class="sourceCode">$ <span class="ex">stack</span> install pandoc

$ <span class="ex">pandoc</span> --version
<span class="ex">pandoc</span>: command not found</code></pre></div><div class="container"><p>Why didn&#39;t it work? Probably because pandoc was installed to a place that isn&#39;t on your search path. To fix this sort of problem, you need to:</p><ol><li>Consult the package manager&#39;s documentation to find out where it installs things.</li><li>Add that location to the search path (below we&#39;ll see how to do that).</li></ol><h3>Debugging by bypassing the search path</h3><p>We installed using Stack, and we know that Stack puts programs into <code>~/.local/bin</code>. First let&#39;s verify that pandoc is indeed there by running it directly, without relying on the search path:</p></div><div class="sourceCode"><pre class="sourceCode"><code class="sourceCode">$ <span class="ex">~/.local/bin/pandoc</span> --version
<span class="ex">pandoc</span> 1.19.2.1</code></pre></div><div class="container"><p>That worked, so next let&#39;s fix the search path.</p><h3>Adding a directory to the path</h3><p>The way you do this will be different depending on what shell you&#39;re using. Here I will assume your shell is Bash.</p></div><div class="sourceCode"><pre class="sourceCode"><code class="sourceCode">$ <span class="bu">export</span> <span class="va">PATH=</span><span class="st">&quot;</span><span class="va">$HOME</span><span class="st">/.local/bin:</span><span class="va">$PATH</span><span class="st">&quot;</span></code></pre></div><div class="container"><p>Now we should be able to run pandoc normally.</p></div><div class="sourceCode"><pre class="sourceCode"><code class="sourceCode">$ <span class="ex">pandoc</span> --version
<span class="ex">pandoc</span> 1.19.2.1</code></pre></div><div class="container"><h3>Making the change permanent</h3><p>So we&#39;ve fixed the path, but what we&#39;ve done so far is only temporary. When you restart your terminal, it will be gone.</p><p>Bash has a mechanism for doing things like this: If you have a file named <code>~/.bashrc</code>, Bash will automatically run all the commands in that file every time you start a terminal. So open <code>~/.bashrc</code> (if it doesn&#39;t exist yet, just create a blank file) and add the following anywhere in it:</p></div><div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span class="co"># This adds Stack&#39;s install directory to the search path</span>
<span class="co"># so we can run programs installed with &#39;stack install&#39;.</span>
<span class="bu">export</span> <span class="va">PATH=</span><span class="st">&quot;</span><span class="va">$HOME</span><span class="st">/.local/bin:</span><span class="va">$PATH</span><span class="st">&quot;</span></code></pre></div><div class="container"><p>Don&#39;t neglect to include the comment, or else as stuff accumulates in your <code>~/.bashrc</code> file over months and years, you&#39;ll end up with no recollection of why you put it there.</p><p>Note that changes to <code>~/.bashrc</code> are <i>not</i> automatically applied to terminals that are already open. You will need to restart each open terminal, or run</p></div><div class="sourceCode"><pre class="sourceCode"><code class="sourceCode">$ <span class="bu">source</span> ~/.bashrc</code></pre></div><div class="container"><p>in each terminal to re-run the initialization script.</p></div></div></div></main><div class="post-footer container"><p>I write about Haskell and related topics; you can find my works online on <a href="http://typeclasses.com">Type Classes</a> and in print from <a href="http://joyofhaskell.com"><span style="text-decoration: italic;">The Joy of Haskell</span></a>.</p></div></body></html>