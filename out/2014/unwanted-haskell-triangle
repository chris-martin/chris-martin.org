<!DOCTYPE HTML>
<html><head><meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1"><title>Unwanted Haskell triangle</title><link rel="icon" href=""><link href="https://fonts.googleapis.com/css?family=Inconsolata|Merriweather" rel="stylesheet"><link rel="stylesheet" type="text/css" href="../hash/bbdb3309c85cc05af4572bd7e5eeb723.css"><meta name="twitter:site:id" content="18271443"><meta name="twitter:title" content="Unwanted Haskell triangle"></head><body><header class="global-page-header"><div class="container"><a href="..">Chris Martin</a></div></header><main><div><div class="post-head container"><h1 class="post-title">Unwanted Haskell triangle</h1><div class="post-date">2014 August 3</div></div><div class="post-body"><div class="container"><blockquote><p>Sometimes I see a Java SO
question, write myself a haskell solution, then sadly read over the thread of
people who will never know about it.</p>— Chris Martin (@chris__martin)
<a href="https://twitter.com/chris__martin/statuses/495434666623909889">August
2, 2014</a></blockquote><p>It’s getting increasingly painful to read Stack Overflow newb questions,
because imperative languages are so unnecessarily difficult.</p><h2>How do I do ____ in Java?</h2><p><a href="https://stackoverflow.com/questions/25091218/print-triangle-pattern-using-java">This question on Stack Overflow</a>
is about producing this string (using Java):</p></div><div class="sourceCode"><pre class="sourceCode"><code class="sourceCode">1
0 1
1 0 1
0 1 0 1</code></pre></div><div class="container"><p>The answers given are okay as far as Java goes (although they’re both subtly
incorrect because they include an extra space at the end of each line).</p></div><div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span class="dt">int</span> i, j, a = <span class="dv">1</span>;
<span class="kw">for</span> (i = <span class="dv">1</span>; i &lt;= <span class="dv">4</span>; i++){
    a = i % <span class="dv">2</span>;
    <span class="kw">for</span>(j=<span class="dv">1</span>; j&lt;=i; j++) {
        <span class="bu">System</span>.<span class="fu">out</span>.<span class="fu">print</span>(a+ <span class="st">&quot; &quot;</span>);
        a = a ^ <span class="dv">1</span>;
    }
    <span class="bu">System</span>.<span class="fu">out</span>.<span class="fu">println</span>();
}</code></pre></div><div class="container"><p>This one’s rather clever.</p></div><div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span class="bu">String</span> str = <span class="st">&quot;&quot;</span>;
<span class="kw">for</span> (<span class="dt">int</span> i = <span class="dv">1</span>; i &lt;= <span class="dv">4</span>; i++) {
    str = (i % <span class="dv">2</span>) + <span class="st">&quot; &quot;</span> + str;
    <span class="bu">System</span>.<span class="fu">out</span>.<span class="fu">println</span>(str);
}</code></pre></div><div class="container"><p>But the thread is frustrating to me because it doesn’t seem like the asker
could have learned anything about algorithm construction. None of the answers
break the problem into smaller logical components. Their correctness isn’t
constructive; you kind of just have to look at it, convince yourself that it’s
correct, and wonder how you could have come up with it on your own.</p><h2>Here’s how you’d do it in Haskell.</h2><p>I want to write a more instructive answer. I turn to my latest pet language. A
few weeks ago it would’ve been Scala. At the moment it’s Haskell.</p><h3>Alternation</h3><p>For starters, at the core of the problem is an alternating sequence of <code>1</code> and
<code>0</code>.</p></div><div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span class="fu">&gt;</span> <span class="kw">let</span> alternation <span class="fu">=</span> map (<span class="ot">`mod`</span> <span class="dv">2</span>) [<span class="dv">1</span><span class="fu">..</span>]
<span class="fu">&gt;</span> take <span class="dv">10</span> alternation
[<span class="dv">1</span>,<span class="dv">0</span>,<span class="dv">1</span>,<span class="dv">0</span>,<span class="dv">1</span>,<span class="dv">0</span>,<span class="dv">1</span>,<span class="dv">0</span>,<span class="dv">1</span>,<span class="dv">0</span>]</code></pre></div><div class="container"><p>Sometimes we need the sequence to start with <code>0</code>, so let’s parameterize it.</p></div><div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span class="fu">&gt;</span> <span class="kw">let</span> alternation start <span class="fu">=</span> map (<span class="ot">`mod`</span> <span class="dv">2</span>) [start<span class="fu">..</span>]
<span class="fu">&gt;</span> take <span class="dv">10</span> <span class="fu">$</span> alternation <span class="dv">0</span>
[<span class="dv">0</span>,<span class="dv">1</span>,<span class="dv">0</span>,<span class="dv">1</span>,<span class="dv">0</span>,<span class="dv">1</span>,<span class="dv">0</span>,<span class="dv">1</span>,<span class="dv">0</span>,<span class="dv">1</span>]
<span class="fu">&gt;</span> take <span class="dv">10</span> <span class="fu">$</span> alternation <span class="dv">1</span>
[<span class="dv">1</span>,<span class="dv">0</span>,<span class="dv">1</span>,<span class="dv">0</span>,<span class="dv">1</span>,<span class="dv">0</span>,<span class="dv">1</span>,<span class="dv">0</span>,<span class="dv">1</span>,<span class="dv">0</span>]</code></pre></div><div class="container"><p>Already we have something here that the other answers don’t: A very small piece
of the puzzle solved in a way that we can analyze and test in isolation.</p><h3>Lines</h3><p>We’re going to be putting these sequences together in space-separated strings,
so we import <code>intercalate :: [a] -&gt; [[a]] -&gt; [a]</code> , which (for <code>Char</code> lists)
resembles Scala’s <code>Iterable.mkString</code> or Python’s <code>str.join</code>.</p></div><div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span class="fu">&gt;</span> <span class="kw">import </span><span class="dt">Data.List</span> (intercalate)</code></pre></div><div class="container"><p>Now we can define each line as a function of its index.</p></div><div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span class="fu">&gt;</span> <span class="kw">let</span> line i <span class="fu">=</span> intercalate <span class="st">&quot; &quot;</span> <span class="fu">$</span> map show <span class="fu">$</span> take i <span class="fu">$</span> alternation i
<span class="fu">&gt;</span> line <span class="dv">3</span>
<span class="st">&quot;1 0 1&quot;</span>
<span class="fu">&gt;</span> line <span class="dv">4</span>
<span class="st">&quot;0 1 0 1&quot;</span></code></pre></div><div class="container"><p>Note how pleasant it is that it’s trivial to test the program at every step of
the design.</p><h3>Triangles</h3><p>A triangle of size <code>n</code> consists of the first <code>n</code> lines joined with a newline.</p></div><div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span class="kw">let</span> triangle n <span class="fu">=</span> intercalate <span class="st">&quot;\n&quot;</span> <span class="fu">$</span> map line [<span class="dv">1</span><span class="fu">..</span>n]
<span class="fu">&gt;</span> putStrLn <span class="fu">$</span> triangle <span class="dv">4</span>
<span class="dv">1</span>
<span class="dv">0</span> <span class="dv">1</span>
<span class="dv">1</span> <span class="dv">0</span> <span class="dv">1</span>
<span class="dv">0</span> <span class="dv">1</span> <span class="dv">0</span> <span class="dv">1</span></code></pre></div><div class="container"><h3>In summation</h3></div><div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span class="kw">import </span><span class="dt">Data.List</span> (intercalate)

<span class="ot">main ::</span> <span class="dt">IO</span>()
main <span class="fu">=</span> putStrLn <span class="fu">$</span> triangle <span class="dv">4</span>
  <span class="kw">where</span>
    <span class="co">-- a triangle with n rows</span>
    triangle n <span class="fu">=</span> intercalate <span class="st">&quot;\n&quot;</span> <span class="fu">$</span> map line [<span class="dv">1</span><span class="fu">..</span>n]
    <span class="co">-- the i^th line of a triangle</span>
    line i <span class="fu">=</span> intercalate <span class="st">&quot; &quot;</span> <span class="fu">$</span> map show <span class="fu">$</span> take i <span class="fu">$</span> alternation i
    <span class="co">-- list of 0 and 1, starting with i mod 2</span>
    alternation i <span class="fu">=</span> map (<span class="ot">`mod`</span> <span class="dv">2</span>) [i<span class="fu">..</span>]</code></pre></div><div class="container"><p>I find it amusing here that I actually wrote as much (if not <i>more</i>) code here
than the Java implementations. I attribute a lot of that to our ability to make
concepts like <code>alternation</code>, <code>line</code>, and <code>triangle</code> explicit and therefore to
give them names. Contrary to stereotype, the Java is terse and symbol-heavy,
and the Haskell uses more human words.</p><h2>Do you have a moment to talk about our Lord and Savior Jesus Christ?</h2><blockquote><p>Sometimes I see a Java SO question, write myself a haskell solution, then sadly read over the thread of people who will never know about it.</p>&mdash; Chris Martin (@chris__martin) <a href="https://twitter.com/chris__martin/status/495434666623909889">August 2, 2014</a></blockquote><blockquote><p>you could post it, just for
curiosity&#39;s sake, but it&#39;d only cause negative emotions</p>—
Chris Martin (@chris__martin) <a
href="https://twitter.com/chris__martin/statuses/495434954399285248">August 2,
2014</a></blockquote><p>I wish we’d do this more often. I wish we’d look at these Java questions and
say: “Look, first you need to <i>understand</i> the problem on a deeper level - So
let’s implement it with more tractable mathematics ... Now that you understand
the basics, we can get into more difficult coding topics like control flow and
Java.”</p><p>Teaching, trolling, or proselytizing?</p><h2>Addendum</h2><p>Here’s a slightly revised program thanks to some feedback.</p><blockquote><p>
<a href="https://twitter.com/chris__martin">@chris__martin</a> Nice
understandable solution. My similar would use
&quot;zeroOnes = &#39;0&#39;:&#39;1&#39;:zeroOnes&quot; and &quot;take i $
drop (i `mod` 2) $ zeroOnes&quot;.</p>— Franklin Chen (@franklinchen)
<a href="https://twitter.com/franklinchen/statuses/496275930667843584">August
4, 2014</a></blockquote></div><div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span class="kw">import </span><span class="dt">Data.List</span> (intercalate, intersperse)

<span class="ot">main ::</span> <span class="dt">IO</span>()
main <span class="fu">=</span> putStrLn <span class="fu">$</span> triangle <span class="dv">4</span>
  <span class="kw">where</span>
    triangle n <span class="fu">=</span> intercalate <span class="st">&quot;\n&quot;</span> <span class="fu">$</span> map line [<span class="dv">1</span><span class="fu">..</span>n]
    line i <span class="fu">=</span> intersperse <span class="ch">&#39; &#39;</span> <span class="fu">$</span> take i <span class="fu">$</span> drop (i <span class="ot">`mod`</span> <span class="dv">2</span>) <span class="fu">$</span> zeroOnes
    zeroOnes <span class="fu">=</span> <span class="ch">&#39;0&#39;</span> <span class="fu">:</span> <span class="ch">&#39;1&#39;</span> <span class="fu">:</span> zeroOnes</code></pre></div><div class="container"><p>I like how it expresses the zero-one sequence in more straightforward manner
without being tricky with arithmetic.</p></div></div></div></main><div class="post-footer container"><p>I write about Haskell and related topics; you can find my works online on <a href="http://typeclasses.com">Type Classes</a> and in print from <a href="http://joyofhaskell.com"><span style="text-decoration: italic;">The Joy of Haskell</span></a>.</p></div></body></html>