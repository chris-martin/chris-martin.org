<!DOCTYPE HTML>
<html><head><meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1"><title>Adjacency</title><link rel="icon" href=""><link href="https://fonts.googleapis.com/css?family=Inconsolata|Merriweather" rel="stylesheet"><link rel="stylesheet" type="text/css" href="../hash/85a636ccc52703eb9b8e8a4508a0cc49.css"><meta name="twitter:site:id" content="18271443"><meta name="twitter:title" content="Adjacency"></head><body><header class="global-page-header"><div class="container"><a href="..">Chris Martin</a></div></header><main><div><div class="post-head container"><h1 class="post-title">Adjacency</h1><div class="post-date">2015 March 11</div></div><div class="post-body"><div class="container"><p>Languages try to allocate the most terse bits of syntax to the most
common operations. The most terse operator is adjacency, or in other
words, no operator at all. So the semantics of adjacency tend to
reflect some central tenet of the language.</p><p>A quick code example:</p></div><div class="sourceCode"><pre class="sourceCode"><code class="sourceCode">a b c</code></pre></div><div class="container"><ul><li><p>In a lisp (adding some parens),
this is &quot;a list of <i>a</i>, <i>b</i>, and <i>c</i>&quot;.
Adjacency is cons.</p></li><li><p>In a concatenative language like J,
this is &quot;<i>a</i> ∘ <i>b</i> ∘ <i>c</i>&quot;.
Adjacency is function composition.</p></li><li><p>In a functional language like Haskell,
this is &quot;(<i>a</i> applied to <i>b</i>) applied to <i>c</i>&quot;.
Adjacency is function application.</p></li><li><p>In a procedural language (adding some newlines/semicolons),
this is &quot;do <i>a</i>, do <i>b</i>, then do <i>c</i>&quot;.
Adjacency is IO sequencing.</p></li></ul><p>When you look at adjacency as a function, Python seems not that all
that different from Haskell.</p><p>Python:</p></div><div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span class="bu">print</span>(<span class="st">&#39;a&#39;</span>) <span class="op">;</span> <span class="bu">print</span>(<span class="st">&#39;b&#39;</span>) <span class="op">;</span> <span class="bu">print</span>(<span class="st">&#39;c&#39;</span>)

<span class="bu">print</span>(<span class="st">&#39;a&#39;</span>) <span class="op">;</span> <span class="bu">print</span>(sys.stdin.readline()) <span class="op">;</span> <span class="bu">print</span>(<span class="st">&#39;c&#39;</span>)</code></pre></div><div class="container"><p>Haskell:</p></div><div class="sourceCode"><pre class="sourceCode"><code class="sourceCode">putStrLn <span class="st">&quot;a&quot;</span> <span class="fu">&gt;&gt;</span> putStrLn <span class="st">&quot;b&quot;</span> <span class="fu">&gt;&gt;</span> putStrLn <span class="st">&quot;c&quot;</span>

putStrLn <span class="st">&quot;a&quot;</span> <span class="fu">&gt;&gt;</span> getLine <span class="fu">&gt;&gt;=</span> putStrLn <span class="fu">&gt;&gt;</span> putStrLn <span class="st">&quot;c&quot;</span></code></pre></div><div class="container"><p>Some code is very IO-heavy, and Haskell realizes this, so it has
a <code>do</code> syntax which adopts the procedural convention of using
newline/semicolon adjacency to denote IO sequencing.</p></div><div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span class="kw">do</span> ; putStrLn <span class="st">&quot;a&quot;</span> ; putStrLn <span class="st">&quot;b&quot;</span> ; putStrLn <span class="st">&quot;c&quot;</span>

<span class="kw">do</span> ; putStrLn <span class="st">&quot;a&quot;</span> ; b <span class="ot">&lt;-</span> getLine ; putStrLn b ; putStrLn <span class="st">&quot;c&quot;</span></code></pre></div><div class="container"><p>There are other types that compose using <code>&gt;&gt;</code> and <code>&gt;&gt;=</code> too (an easy
example is <code>Maybe</code>), and they can also be used with the <code>do</code> syntax.</p><p>Shit, I almost accidentally wrote a monad tutorial.</p></div></div></div></main><div class="post-footer container"><p>I write about Haskell and related topics; you can find my works online on <a href="http://typeclasses.com">Type Classes</a> and in print from <a href="http://joyofhaskell.com"><span style="text-decoration: italic;">The Joy of Haskell</span></a>.</p></div></body></html>