<!DOCTYPE HTML>
<html><head><meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1"><title>Intro Scala pitfalls</title><link rel="icon" href=""><link href="https://fonts.googleapis.com/css?family=Inconsolata|Merriweather" rel="stylesheet"><link rel="stylesheet" type="text/css" href="../hash/85a636ccc52703eb9b8e8a4508a0cc49.css"><meta name="twitter:site:id" content="18271443"><meta name="twitter:title" content="Intro Scala pitfalls"></head><body><header class="global-page-header"><div class="container"><a href="..">Chris Martin</a></div></header><main><div><div class="post-head container"><h1 class="post-title">Intro Scala pitfalls</h1><div class="post-date">2015 August 24</div></div><div class="post-body"><div class="container"><p>This is an abridged summary of what I’ve learned from watching a few people
get started with Scala. There are a handful of mistakes that most people
(who aren’t coming from a Haskell background) tend to fall into.</p><p>My advice for Scala beginners:</p><ol><li><a href="#collection-exceptions">Don’t use collections methods that throw.</a></li><li><a href="#try">Don’t use <code>Try</code> (often).</a></li><li><a href="#option-get">Don’t use <code>Option.get</code>.</a></li><li><a href="#block-depth">Reduce block depth with <code>for</code> comprehensions.</a></li><li><a href="#java-conversions">Use implicit Java conversions.</a></li></ol><p>I believe this is all pretty uncontroversial among Scala mavens, though
the unindoctrinated may require some discussion of functional programming
to justify it (which I make no attempt to do here).</p><h2><a name="collection-exceptions"></a> Collection exceptions</h2><p>These methods are killers:</p></div><div class="sourceCode"><pre class="sourceCode"><code class="sourceCode">(_: Seq[A].<span class="fu">head</span>)       :     =&gt; A

(_: Seq[A].<span class="fu">apply</span>)      : Int =&gt; A

(_: Map[A, B]).<span class="fu">apply</span>   : A   =&gt; B</code></pre></div><div class="container"><p>They’re innocuously-named and look like the right methods to call, but in most
cases you need something that returns an <code>Option</code> instead:</p></div><div class="sourceCode"><pre class="sourceCode"><code class="sourceCode">(_: Seq[A].<span class="fu">headOption</span>) :     =&gt; Option[A]

(_: Seq[A].<span class="fu">lift</span>)       : Int =&gt; Option[A]

(_: Map[A, B].<span class="fu">get</span>)     : A   =&gt; Option[B]</code></pre></div><div class="container"><p>The correct methods are all slightly longer (when we elide <code>apply</code>) than their
improperly typed counterparts, so coders exploring the API on their own tend to
find the wrong methods first.</p><h2><a name="try"></a> <code>Try</code></h2><p>If one then discovers <code>Try</code> before correcting those habits, you end up a lot of
expressions like</p></div><div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span class="fu">Try</span>(xs.<span class="fu">head</span>).<span class="fu">toOption</span></code></pre></div><div class="container"><p>instead of</p></div><div class="sourceCode"><pre class="sourceCode"><code class="sourceCode">xs.<span class="fu">headOption</span></code></pre></div><div class="container"><p>This can be tricky because there are some places where exceptions are
unavoidable. For example, I write this function often:</p></div><div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span class="kw">def</span> <span class="fu">parseDecimal</span>(x: String): Option[BigDecimal] =
  <span class="fu">Try</span>(BigDecimal(x)).<span class="fu">toOption</span></code></pre></div><div class="container"><p>It’s important to explain that this is just a workaround for a deficiency in
the library, not an idiom to emulate.</p><h2><a name="option-get"></a> <code>Option.get</code></h2><p>These examples are at least careful enough to check the <code>Option</code> before
unwrapping it, similar to how one would guard against <code>null</code> dereferences
in other languages.</p></div><div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span class="kw">if</span> (xOption.<span class="fu">isDefined</span>) <span class="fu">f</span>(xOption.<span class="fu">get</span>)

<span class="kw">if</span> (xOption.<span class="fu">isDefined</span>) <span class="fu">f</span>(xOption.<span class="fu">get</span>) <span class="kw">else</span> y

xOption.<span class="fu">isEmpty</span> || (xOption.<span class="fu">isDefined</span> &amp;&amp; !<span class="fu">f</span>(xOption.<span class="fu">get</span>))</code></pre></div><div class="container"><p>In Scala we can do better and preserve type safety all the way through.
The easy go-to solution for any <code>Option</code> problem is a pattern match:</p></div><div class="sourceCode"><pre class="sourceCode"><code class="sourceCode">xOption <span class="kw">match</span> {
  <span class="kw">case</span> Some(x) =&gt; <span class="fu">f</span>(x)
  <span class="kw">case</span> None    =&gt;
}

xOption <span class="kw">match</span> {
  <span class="kw">case</span> Some(x) =&gt; <span class="fu">f</span>(x)
  <span class="kw">case</span> None    =&gt; y
}

xOption <span class="kw">match</span> {
  <span class="kw">case</span> Some(x) =&gt; !<span class="fu">f</span>(x)
  <span class="kw">case</span> None    =&gt; <span class="kw">true</span>
}</code></pre></div><div class="container"><p>And then with a little more API familiarity these expressions can be reduced:</p></div><div class="sourceCode"><pre class="sourceCode"><code class="sourceCode">xOption.<span class="fu">foreach</span>(f)

xOption.<span class="fu">map</span>(f).<span class="fu">getOrElse</span>(y)

!xOption.<span class="fu">exists</span>(f)</code></pre></div><div class="container"><h2><a name="block-depth"></a> Block depth</h2><p>You then start to encounter the nauseating block nesting known in some
circles as “callback hell”:</p></div><div class="sourceCode"><pre class="sourceCode"><code class="sourceCode">xs.<span class="fu">foreach</span>(x =&gt;
  <span class="fu">f</span>(x).<span class="fu">headOption</span>.<span class="fu">foreach</span>(y =&gt;
    map.<span class="fu">get</span>(y).<span class="fu">foreach</span>(z =&gt;
      <span class="fu">g</span>(z, x)
    )
  )
)</code></pre></div><div class="container"><br></div><div class="sourceCode"><pre class="sourceCode"><code class="sourceCode">w.<span class="fu">toRight</span>(<span class="st">&quot;a&quot;</span>).<span class="fu">flatMap</span>(x =&gt;
  <span class="fu">f</span>(x).<span class="fu">toRight</span>(<span class="st">&quot;b&quot;</span>).<span class="fu">flatMap</span>(y =&gt;
    <span class="fu">g</span>(y).<span class="fu">toRight</span>(<span class="st">&quot;c&quot;</span>)
  )
)</code></pre></div><div class="container"><p>So at this point you have to introduce <code>for</code> comprehensions.</p></div><div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span class="kw">for</span> {
  x &lt;- xs
  y &lt;- <span class="fu">f</span>(x).<span class="fu">headOption</span>
  z &lt;- map.<span class="fu">get</span>(y)
} <span class="fu">g</span>(z, x)</code></pre></div><div class="container"><br></div><div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span class="kw">for</span> {
  x &lt;- w.<span class="fu">toRight</span>(<span class="st">&quot;a&quot;</span>)
  y &lt;- <span class="fu">f</span>(x).<span class="fu">toRight</span>(<span class="st">&quot;b&quot;</span>)
  z &lt;- <span class="fu">g</span>(y).<span class="fu">toRight</span>(<span class="st">&quot;c&quot;</span>)
} <span class="kw">yield</span> z</code></pre></div><div class="container"><p>Once someone is comfortable with <code>for</code> expressions, I think they’ve got the
Scala essentials pretty well under control.</p><h2><a name="java-conversions"></a> Java conversions</h2><p>There’s one more thing that will only come up if you’re doing Java interop.
There are several options for conversions between Java and Scala collections:</p><ul><li><code>scala.collection.convert</code></li><li><code>scala.collection.JavaConversions</code></li><li><code>scala.collection.JavaConverters</code></li></ul><p>Unfortunately these names are all very similar, and the documentation doesn’t
explain how to choose.</p><p>I find this one easiest in most situations:</p></div><div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span class="kw">import</span> scala.<span class="fu">collection</span>.<span class="fu">JavaConversions</span>.<span class="fu">_</span></code></pre></div><div class="container"><p>This import provides implicit conversions between the two collections libraries,
which usually works without thinking about it at all.</p></div></div></div></main><div class="post-footer container"><p>I write about Haskell and related topics; you can find my works online on <a href="http://typeclasses.com">Type Classes</a> and in print from <a href="http://joyofhaskell.com"><span style="text-decoration: italic;">The Joy of Haskell</span></a>.</p></div></body></html>